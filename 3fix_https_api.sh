#!/bin/bash
# üîß Fix HTTPS API integration

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTPS + API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
echo "====================================="

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π HTTPS —Å–µ—Ä–≤–µ—Ä
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ HTTPS —Å–µ—Ä–≤–µ—Ä–∞..."
if [ -f "run/https_server.pid" ]; then
    kill $(cat run/https_server.pid) 2>/dev/null
    rm run/https_server.pid
fi

# –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π HTTPS —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º API
cat > https_api_server.js << 'EOF'
const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');
const express = require('express');

const app = express();

// Middleware –¥–ª—è JSON
app.use(express.json());

// CORS –¥–ª—è HTTPS
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    if (req.method === 'OPTIONS') {
        res.sendStatus(200);
    } else {
        next();
    }
});

// –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
app.use('/api', (req, res) => {
    const options = {
        hostname: 'localhost',
        port: 8080,
        path: req.originalUrl,
        method: req.method,
        headers: req.headers
    };

    const proxyReq = http.request(options, (proxyRes) => {
        res.status(proxyRes.statusCode);
        Object.keys(proxyRes.headers).forEach(key => {
            res.setHeader(key, proxyRes.headers[key]);
        });
        proxyRes.pipe(res);
    });

    proxyReq.on('error', (err) => {
        console.error('Proxy error:', err);
        res.status(500).json({ error: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
    });

    if (req.body && Object.keys(req.body).length > 0) {
        proxyReq.write(JSON.stringify(req.body));
    }
    proxyReq.end();
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('dashkabot_web'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS
const options = {
    key: fs.readFileSync('ssl/key.pem'),
    cert: fs.readFileSync('ssl/cert.pem')
};

const port = 8443;

https.createServer(options, app).listen(port, '0.0.0.0', () => {
    console.log('üîí HTTPS API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:');
    console.log('   https://172.20.10.4:8443');
    console.log('   https://localhost:8443');
    console.log('');
    console.log('‚úÖ API –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
});
EOF

echo "‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π HTTPS —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω"

# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
echo "üöÄ –ó–∞–ø—É—Å–∫ HTTPS —Å–µ—Ä–≤–µ—Ä–∞ —Å API..."
node https_api_server.js > logs/https_api_server.log 2>&1 &
HTTPS_PID=$!
echo $HTTPS_PID > run/https_server.pid

sleep 3

if kill -0 $HTTPS_PID 2>/dev/null; then
    echo "‚úÖ HTTPS API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $HTTPS_PID)"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTPS API..."
    sleep 2
    
    TEST_RESULT=$(curl -k -s -X POST https://localhost:8443/api/translate \
      -H "Content-Type: application/json" \
      -d '{"text":"—Ç–µ—Å—Ç","fromLang":"RU","toLang":"DE"}')
    
    if echo "$TEST_RESULT" | grep -q "translation"; then
        echo "‚úÖ HTTPS API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        echo "üé§ –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ HTTPS –≥–æ—Ç–æ–≤"
    else
        echo "‚ö†Ô∏è HTTPS API —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        echo "–û—Ç–≤–µ—Ç: $TEST_RESULT"
    fi
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞"
fi

echo ""
echo "üîó –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"
echo "‚Ä¢ üì± HTTPS —Å API: https://172.20.10.4:8443"
echo "‚Ä¢ üíª –õ–æ–∫–∞–ª—å–Ω–æ: https://localhost:8443"
echo ""
echo "üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ!"