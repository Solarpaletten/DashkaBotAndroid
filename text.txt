<!DOCTYPE html>
<html>
<head>
    <title>üöÄ DashkaBot Mobile</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta charset="UTF-8">
    <style>
        * { box-sizing: border-box; margin: 0; padding: 0; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 400px;
            margin: 0 auto;
            background: rgba(255,255,255,0.1);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { font-size: 28px; margin-bottom: 10px; }
        
        .role-selector {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
        }
        .role-btn {
            flex: 1;
            padding: 15px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            opacity: 0.7;
        }
        .role-btn.user { background: #4ecdc4; color: white; }
        .role-btn.steuerberater { background: #ff6b6b; color: white; }
        .role-btn.active { 
            opacity: 1;
            transform: scale(1.05); 
            box-shadow: 0 5px 20px rgba(0,0,0,0.3);
        }
        
        .status {
            background: rgba(255,255,255,0.2);
            padding: 15px;
            border-radius: 12px;
            margin: 20px 0;
            text-align: center;
            font-weight: 500;
        }
        
        .translation-area {
            background: rgba(255,255,255,0.15);
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            min-height: 120px;
        }
        
        .translation-area .label {
            font-size: 14px;
            opacity: 0.8;
            margin-bottom: 8px;
        }
        
        .translation-area .text {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 15px;
            min-height: 24px;
        }

        .text-input {
            width: 100%;
            padding: 15px;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 12px;
            background: rgba(255,255,255,0.1);
            color: white;
            font-size: 16px;
            margin-bottom: 15px;
            resize: vertical;
            min-height: 80px;
        }
        
        .text-input::placeholder {
            color: rgba(255,255,255,0.6);
        }
        
        .controls {
            text-align: center;
            margin-top: 30px;
        }
        
   .btn-group {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    justify-content: center;
}

/* ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –ù–û–í–´–ï –°–¢–ò–õ–ò: */
.text-controls {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 15px;
}

.small-btn {
    padding: 8px 12px;
    border: none;
    border-radius: 6px;
    font-size: 12px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s ease;
    color: white;
    min-width: 60px;
}

.btn-paste {
    background: #17a2b8;
}

.btn-clear-small {
    background: #6c757d;
}

.btn-copy {
    background: #28a745;
}

.small-btn:hover {
    transform: translateY(-1px);
    opacity: 0.9;
}

.small-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
}
        

        .record-btn {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            border: none;
            font-size: 32px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
            box-shadow: 0 6px 20px rgba(231,76,60,0.4);
            margin-bottom: 15px;
        }
        
        .record-btn:active { transform: scale(0.95); }
        .record-btn.recording { 
            background: linear-gradient(45deg, #c0392b, #a93226);
            animation: pulse 1.5s infinite;
        }
        
        .record-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .instruction {
            text-align: center;
            opacity: 0.9;
            font-size: 16px;
        }
        
        .device-info {
            margin-top: 20px;
            padding: 15px;
            background: rgba(0,0,0,0.2);
            border-radius: 12px;
            font-size: 14px;
            text-align: center;
        }

        .connection-status {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            margin-top: 10px;
            opacity: 0.8;
        }

        .connection-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }

        .connected { background: #2ecc71; }
        .disconnected { background: #e74c3c; }

        .mode-tabs {
            display: flex;
            margin-bottom: 20px;
            background: rgba(0,0,0,0.2);
            border-radius: 12px;
            padding: 5px;
        }
        
        .mode-tab {
            flex: 1;
            padding: 10px;
            border: none;
            background: transparent;
            color: white;
            font-size: 14px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .mode-tab.active {
            background: rgba(255,255,255,0.2);
        }
        
        .mode-content {
            display: none;
        }
        
        .mode-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ DashkaBot</h1>
            <p>Cloud - –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫</p>
        </div>
        
        <div class="role-selector">
            <button class="role-btn user active" onclick="setRole('user')">
                üá∑üá∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            </button>
            <button class="role-btn steuerberater" onclick="setRole('steuerberater')">
                üá©üá™ Steuerberater
            </button>
        </div>
        
        <div class="mode-tabs">
            <button class="mode-tab active" onclick="switchMode('text')">üìù –¢–µ–∫—Å—Ç</button>
            <button class="mode-tab" onclick="switchMode('voice')">üé§ –ì–æ–ª–æ—Å</button>
        </div>
        
        <div class="status" id="status">
            üü¢ DashkaBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
        </div>
        
        <div id="textMode" class="mode-content active">
            <textarea 
                id="textInput" 
                class="text-input" 
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞..."
            ></textarea>
            
            <div class="btn-group">
                <button class="btn btn-translate" id="translateBtn" onclick="translateText()">
                    üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
                </button>
                <button class="btn btn-clear" onclick="clearText()">
                    üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                </button>
            </div>
        </div>
        
        <div id="voiceMode" class="mode-content">
            <div class="controls">
                <button class="record-btn" id="recordBtn" onclick="toggleRecording()">
                    üé§
                </button>
                <div class="instruction">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø–∏—Å–∏</div>
            </div>
        </div>
        
        <div class="translation-area">
            <div class="label">–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</div>
            <div class="text" id="originalText">–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω...</div>
            
            <div class="label">–ü–µ—Ä–µ–≤–æ–¥:</div>
            <div class="text" id="translatedText">–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</div>
        </div>
        
        <div class="device-info">
            <strong>DashkaBot Cloud</strong><br>
            –ü–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç<br>
            
            <div class="connection-status">
                <div>
                    <span class="connection-dot" id="aiDot"></span>
                    AI Server
                </div>
                <div>
                    <span class="connection-dot" id="wsDot"></span>
                    WebSocket
                </div>
                <div>
                    <span class="connection-dot" id="speechDot"></span>
                    Speech API
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let currentRole = 'user';
        let isRecording = false;
        let recognition = null;
        let websocket = null;
        let currentMode = 'text';
        
        const config = {
            aiServer: window.location.origin,
            wsServer: `wss://${window.location.host}/ws`,
            enableWebSocket: false,
            enableSpeech: true
        };

        function initSystem() {
            checkAIServer();
            initWebSocket();
            initSpeechRecognition();
            setRole('user');
            switchMode('text');
        }

        function switchMode(mode) {
            currentMode = mode;
            
            document.querySelectorAll('.mode-tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.mode-content').forEach(content => content.classList.remove('active'));
            
            if (mode === 'text') {
                document.querySelector('.mode-tab:first-child').classList.add('active');
                document.getElementById('textMode').classList.add('active');
            } else {
                document.querySelector('.mode-tab:last-child').classList.add('active');
                document.getElementById('voiceMode').classList.add('active');
            }
        }

        async function translateText() {
            const text = document.getElementById('textInput').value.trim();
            if (!text) {
                updateStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                return;
            }

            const translateBtn = document.getElementById('translateBtn');
            translateBtn.disabled = true;
            translateBtn.textContent = '‚è≥ –ü–µ—Ä–µ–≤–æ–¥–∏–º...';
            
            document.getElementById('originalText').textContent = text;
            updateStatus('üîÑ –ü–µ—Ä–µ–≤–æ–∂—É...');
            
            try {
                const fromLang = currentRole === 'user' ? 'RU' : 'DE';
                const toLang = currentRole === 'user' ? 'DE' : 'RU';
                
                const response = await fetch(`${config.aiServer}/translate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        text: text,
                        source_language: fromLang,
                        target_language: toLang
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`AI Server error: ${response.status}`);
                }
                
                const result = await response.json();
                const translation = result.translated_text || '[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞]';
                
                document.getElementById('translatedText').textContent = translation;
                updateStatus(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ! (${fromLang} ‚Üí ${toLang})`);
                
                if (config.enableSpeech && 'speechSynthesis' in window) {
                    speakTranslation(translation, toLang.toLowerCase());
                }
                
                if (websocket && websocket.readyState === WebSocket.OPEN) {
                    const wsMessage = {
                        type: 'translation',
                        role: currentRole,
                        original: text,
                        translation: translation,
                        from: fromLang.toLowerCase(),
                        to: toLang.toLowerCase(),
                        timestamp: new Date().toISOString()
                    };
                    websocket.send(JSON.stringify(wsMessage));
                }
                
            } catch (error) {
                console.error('Translation error:', error);
                updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ' + error.message);
                document.getElementById('translatedText').textContent = '–û—à–∏–±–∫–∞: ' + error.message;
            } finally {
                translateBtn.disabled = false;
                translateBtn.textContent = 'üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏';
            }
        }

        function clearText() {
            document.getElementById('textInput').value = '';
            document.getElementById('originalText').textContent = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω...';
            document.getElementById('translatedText').textContent = '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...';
            updateStatus('üü¢ DashkaBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        }

        async function checkAIServer() {
            try {
                const response = await fetch(`${config.aiServer}/health`);
                const data = await response.json();
                updateConnectionStatus('ai', true);
                console.log('AI Server connected:', data);
            } catch (error) {
                updateConnectionStatus('ai', false);
                console.error('AI Server not available:', error);
            }
        }

        function initWebSocket() {
            if (!config.enableWebSocket) return;
            
            try {
                websocket = new WebSocket(config.wsServer);
                
                websocket.onopen = function() {
                    updateConnectionStatus('ws', true);
                    console.log('WebSocket connected');
                };
                
                websocket.onclose = function() {
                    updateConnectionStatus('ws', false);
                    console.log('WebSocket disconnected');
                };
                
                websocket.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                };
                
                websocket.onerror = function(error) {
                    updateConnectionStatus('ws', false);
                    console.error('WebSocket error:', error);
                };
            } catch (error) {
                updateConnectionStatus('ws', false);
                console.error('WebSocket init failed:', error);
            }
        }

        function initSpeechRecognition() {
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                updateConnectionStatus('speech', false);
                console.error('Speech recognition not supported');
                return;
            }

            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognition = new SpeechRecognition();
            
            recognition.continuous = false;
            recognition.interimResults = true;
            
            recognition.onstart = function() {
                updateConnectionStatus('speech', true);
                console.log('Speech recognition started');
            };
            
            recognition.onresult = function(event) {
                let finalTranscript = '';
                let interimTranscript = '';
                
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    const transcript = event.results[i][0].transcript;
                    if (event.results[i].isFinal) {
                        finalTranscript += transcript;
                    } else {
                        interimTranscript += transcript;
                    }
                }
                
                if (finalTranscript) {
                    processRecording(finalTranscript.trim());
                } else if (interimTranscript) {
                    document.getElementById('originalText').textContent = 
                        interimTranscript + ' (–≥–æ–≤–æ—Ä–∏—Ç–µ...)';
                }
            };
            
            recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
                updateStatus(`‚ùå –û—à–∏–±–∫–∞: ${event.error}`);
                stopRecording();
            };
            
            recognition.onend = function() {
                if (isRecording) {
                    stopRecording();
                }
            };
        }

        function setRole(role) {
            currentRole = role;
            document.querySelectorAll('.role-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelector('.role-btn.' + role).classList.add('active');
            
            const roleName = role === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üá∑üá∫' : 'Steuerberater üá©üá™';
            updateStatus('–†–æ–ª—å: ' + roleName);
            
            if (recognition) {
                recognition.lang = role === 'user' ? 'ru-RU' : 'de-DE';
            }
        }
        
        // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
        function toggleRecording() {
            if (!recognition) {
                updateStatus('‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
                return;
            }
            
            const btn = document.getElementById('recordBtn');
            
            if (!isRecording) {
                // –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ü–ò–°–¨
                startRecording();
                btn.textContent = '‚èπÔ∏è';
                btn.classList.add('recording');
                btn.style.background = 'linear-gradient(45deg, #c0392b, #a93226)';
                isRecording = true;
                
                document.querySelector('.instruction').textContent = '–ì–æ–≤–æ—Ä–∏—Ç–µ... –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏';
                
            } else {
                // –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ó–ê–ü–ò–°–¨  
                stopRecording();
                btn.textContent = 'üé§';
                btn.classList.remove('recording');
                btn.style.background = 'linear-gradient(45deg, #e74c3c, #c0392b)';
                isRecording = false;
                
                document.querySelector('.instruction').textContent = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø–∏—Å–∏';
            }
        }

        function startRecording() {
            updateStatus('üé§ –°–ª—É—à–∞—é... –ù–∞–∂–º–∏—Ç–µ ‚èπÔ∏è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
            document.getElementById('originalText').textContent = '–ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å... (–Ω–∞–∂–º–∏—Ç–µ ‚èπÔ∏è –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ)';
            document.getElementById('translatedText').textContent = '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...';
            
            try {
                recognition.continuous = true;
                recognition.interimResults = true;
                recognition.start();
            } catch (error) {
                console.error('Failed to start recording:', error);
                updateStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å');
                isRecording = false;
                
                const btn = document.getElementById('recordBtn');
                btn.textContent = 'üé§';
                btn.classList.remove('recording');
            }
        }

        function stopRecording() {
            updateStatus('‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞...');
            isRecording = false;
            
            const btn = document.getElementById('recordBtn');
            btn.textContent = 'üé§';
            btn.classList.remove('recording');
            btn.style.background = 'linear-gradient(45deg, #e74c3c, #c0392b)';
            
            if (recognition) {
                recognition.stop();
            }
            
            setTimeout(() => {
                if (!isRecording) {
                    updateStatus('üé§ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏');
                }
            }, 2000);
        }
        
        async function processRecording(text) {
            if (!text.trim()) {
                updateStatus('‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
                return;
            }

            document.getElementById('originalText').textContent = text;
            updateStatus('üîÑ –ü–µ—Ä–µ–≤–æ–∂—É...');
            
            try {
                const fromLang = currentRole === 'user' ? 'RU' : 'DE';
                const toLang = currentRole === 'user' ? 'DE' : 'RU';
                
                const response = await fetch(`${config.aiServer}/translate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        text: text,
                        source_language: fromLang,
                        target_language: toLang
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`AI Server error: ${response.status}`);
                }
                
                const result = await response.json();
                const translation = result.translated_text || '[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞]';
                
                document.getElementById('translatedText').textContent = translation;
                updateStatus('‚úÖ –ì–æ—Ç–æ–≤–æ!');
                
                if (config.enableSpeech && 'speechSynthesis' in window) {
                    speakTranslation(translation, toLang.toLowerCase());
                }
                
                if (websocket && websocket.readyState === WebSocket.OPEN) {
                    const wsMessage = {
                        type: 'translation',
                        role: currentRole,
                        original: text,
                        translation: translation,
                        from: fromLang.toLowerCase(),
                        to: toLang.toLowerCase(),
                        timestamp: new Date().toISOString()
                    };
                    websocket.send(JSON.stringify(wsMessage));
                }
                
                setTimeout(() => {
                    updateStatus('üé§ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏');
                }, 3000);
                
            } catch (error) {
                console.error('Translation error:', error);
                updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞');
                document.getElementById('translatedText').textContent = '–û—à–∏–±–∫–∞: ' + error.message;
                
                setTimeout(() => {
                    updateStatus('üé§ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏');
                }, 3000);
            }
        }
        
        function speakTranslation(text, language) {
            console.log('üîä –ó–∞–ø—É—Å–∫ TTS:', text, language);
            
            if (window.DashkaBotAndroid && window.DashkaBotAndroid.speakText) {
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π Android TTS');
                window.DashkaBotAndroid.speakText(text, language);
                updateStatus('üîä –ü—Ä–æ–∏–∑–Ω–æ—à—É —á–µ—Ä–µ–∑ Android TTS...');
                setTimeout(() => updateStatus('‚úÖ –ì–æ—Ç–æ–≤–æ!'), 3000);
                return;
            }
            
            if (!('speechSynthesis' in window)) {
                console.log('‚ùå Speech Synthesis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                updateStatus('‚ùå –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
                return;
            }
            
            console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π TTS');
            speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = language === 'de' ? 'de-DE' : 
                            language === 'en' ? 'en-US' :
                            language === 'es' ? 'es-ES' :
                            language === 'pl' ? 'pl-PL' :
                            language === 'cs' ? 'cs-CZ' :
                            language === 'lt' ? 'lt-LT' :
                            language === 'lv' ? 'lv-LV' :
                            language === 'no' ? 'no-NO' :
                            'ru-RU';
            utterance.rate = 0.8;
            utterance.pitch = 1.0;
            utterance.volume = 1.0;
            
            utterance.onstart = () => updateStatus('üîä –ü—Ä–æ–∏–∑–Ω–æ—à—É –ø–µ—Ä–µ–≤–æ–¥...');
            utterance.onend = () => updateStatus('‚úÖ –ì–æ—Ç–æ–≤–æ!');
            utterance.onerror = (event) => {
                console.error('Speech synthesis error:', event.error);
                updateStatus('‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è');
            };
            
            speechSynthesis.speak(utterance);
        }
        
        function handleWebSocketMessage(data) {
            if (data.type === 'translation' && data.role !== currentRole) {
                document.getElementById('originalText').textContent = 
                    `[${data.role}]: ${data.original}`;
                document.getElementById('translatedText').textContent = data.translation;
                updateStatus(`üì® –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç ${data.role}`);
            }
        }
        
        function updateConnectionStatus(service, connected) {
            const dot = document.getElementById(service + 'Dot');
            if (dot) {
                dot.className = `connection-dot ${connected ? 'connected' : 'disconnected'}`;
            }
        }
        
        function updateStatus(message) {
            document.getElementById('status').textContent = message;
        }
        
        window.onload = function() {
            initSystem();
            updateStatus('üü¢ DashkaBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        };

        setInterval(() => {
            if (config.enableWebSocket && (!websocket || websocket.readyState === WebSocket.CLOSED)) {
                console.log('Reconnecting WebSocket...');
                initWebSocket();
            }
        }, 5000);

        setInterval(() => {
            checkAIServer();
        }, 10000);

        document.addEventListener('DOMContentLoaded', function() {
            const textInput = document.getElementById('textInput');
            if (textInput) {
                textInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter' && e.ctrlKey) {
                        translateText();
                    }
                });
            }
        });
    </script>
</body>
</html>