// üé§ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≤–∞—à –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

async function diagnoseMicrophone() {
    const status = document.getElementById('status');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ API
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            throw new Error('API getUserMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
        
        status.textContent = 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...';
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        const permissions = await navigator.permissions.query({name: 'microphone'});
        console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', permissions.state);
        
        if (permissions.state === 'denied') {
            throw new Error('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞');
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø
        const stream = await navigator.mediaDevices.getUserMedia({
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
            }
        });
        
        // –£—Å–ø–µ—Ö!
        status.textContent = '‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!';
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
        stream.getTracks().forEach(track => track.stop());
        
        return true;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', error);
        
        let errorMessage = '‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ';
        
        if (error.name === 'NotAllowedError') {
            errorMessage += '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ.';
        } else if (error.name === 'NotFoundError') {
            errorMessage += '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.';
        } else if (error.name === 'NotSupportedError') {
            errorMessage += '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HTTPS.';
        } else {
            errorMessage += error.message;
        }
        
        status.textContent = errorMessage;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        showMicrophoneInstructions(error);
        
        return false;
    }
}

function showMicrophoneInstructions(error) {
    const instructions = document.createElement('div');
    instructions.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0,0,0,0.9);
        color: white;
        padding: 20px;
        border-radius: 10px;
        max-width: 400px;
        z-index: 1000;
        text-align: center;
    `;
    
    let content = '<h3>üé§ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</h3>';
    
    if (location.protocol !== 'https:') {
        content += `
            <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS</p>
            <p><a href="https://${location.hostname}:8443" style="color: #4CAF50;">
                –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ HTTPS –≤–µ—Ä—Å–∏—é
            </a></p>
        `;
    }
    
    content += `
        <h4>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –±—Ä–∞—É–∑–µ—Ä–∞–º:</h4>
        <p><strong>Chrome:</strong> –ù–∞–∂–º–∏—Ç–µ üîí –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ ‚Üí –†–∞–∑—Ä–µ—à–µ–Ω–∏—è ‚Üí –ú–∏–∫—Ä–æ—Ñ–æ–Ω</p>
        <p><strong>Safari:</strong> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –í–µ–±-—Å–∞–π—Ç—ã ‚Üí –ú–∏–∫—Ä–æ—Ñ–æ–Ω</p>
        <p><strong>iPhone:</strong> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Safari ‚Üí –ú–∏–∫—Ä–æ—Ñ–æ–Ω</p>
        <button onclick="this.parentElement.remove()" style="
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
        ">–ü–æ–Ω—è—Ç–Ω–æ</button>
    `;
    
    instructions.innerHTML = content;
    document.body.appendChild(instructions);
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –±–µ–∑ Speech Recognition
async function startManualRecording() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const mediaRecorder = new MediaRecorder(stream);
        const audioChunks = [];
        
        mediaRecorder.ondataavailable = event => {
            audioChunks.push(event.data);
        };
        
        mediaRecorder.onstop = async () => {
            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Web Speech API, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            
            updateStatus('üé§ –ê—É–¥–∏–æ –∑–∞–ø–∏—Å–∞–Ω–æ, –Ω–æ –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è');
        };
        
        mediaRecorder.start();
        updateStatus('üé§ –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º)...');
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            mediaRecorder.stop();
            stream.getTracks().forEach(track => track.stop());
        }, 5000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –∑–∞–ø–∏—Å–∏:', error);
        updateStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ' + error.message);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('load', () => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const diagnosticBtn = document.createElement('button');
    diagnosticBtn.textContent = 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞';
    diagnosticBtn.className = 'test-btn';
    diagnosticBtn.onclick = diagnoseMicrophone;
    
    const testButtons = document.querySelector('.test-buttons');
    if (testButtons) {
        testButtons.appendChild(diagnosticBtn);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    setTimeout(diagnoseMicrophone, 2000);
});