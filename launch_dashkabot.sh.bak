#!/bin/zsh
# 🚀 DashkaBot Complete Launch Script
# Полный скрипт запуска системы синхронного голосового перевода

echo "🚀 DashkaBot - Система синхронного голосового перевода"
echo "====================================================="
echo "⏰ Запуск: $(date '+%Y-%m-%d %H:%M:%S')"
echo "📁 Директория: $(pwd)"
echo ""

START_TIME=$(date +%s)

# Функция для показа прогресса
show_progress() {
    local step=$1
    local total=$2
    local message=$3
    local elapsed=$(($(date +%s) - START_TIME))
    
    echo "[$step/$total] [${elapsed}s] $message"
    echo "$(printf '▓%.0s' $(seq 1 $((step * 50 / total))))$(printf '░%.0s' $(seq 1 $((50 - step * 50 / total))))"
}

# Функция проверки статуса
check_status() {
    if [ $1 -eq 0 ]; then
        echo "✅ $2"
    else
        echo "❌ $2"
        return 1
    fi
}

# =================== ШАГ 1: ПРОВЕРКА ОКРУЖЕНИЯ ===================
show_progress 1 10 "🔍 Проверка системного окружения"

echo "🖥️  Система: $(uname -s) $(uname -r)"
echo "🏠 Директория: $(pwd)"
echo "👤 Пользователь: $(whoami)"

# Проверка Python
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version)
    echo "✅ Python: $PYTHON_VERSION"
else
    echo "❌ Python3 не найден"
    echo "📦 Установите: brew install python"
    exit 1
fi

# Проверка Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo "✅ Node.js: $NODE_VERSION"
else
    echo "❌ Node.js не найден"
    echo "📦 Установите: brew install node"
    exit 1
fi

# Проверка ADB
if command -v adb &> /dev/null; then
    ADB_VERSION=$(adb version | head -1)
    echo "✅ ADB: $ADB_VERSION"
else
    echo "❌ ADB не найден"
    echo "📦 Установите: brew install android-platform-tools"
    exit 1
fi

# =================== ШАГ 2: ПРОВЕРКА ФАЙЛОВ ПРОЕКТА ===================
show_progress 2 10 "📁 Проверка файлов проекта"

# Проверяем ключевые файлы
echo "📋 Проверка файлов проекта:"

# Проверяем файлы по одному
if [ -f "ai_server.py" ]; then
    echo "  ✅ ai_server.py - AI сервер переводов"
else
    echo "  ❌ ai_server.py - ОТСУТСТВУЕТ"
    exit 1
fi

if [ -f "websocket_server.js" ]; then
    echo "  ✅ websocket_server.js - WebSocket сервер синхронизации"
else
    echo "  ❌ websocket_server.js - ОТСУТСТВУЕТ"
    exit 1
fi

if [ -f "dashkabot_web/index.html" ]; then
    echo "  ✅ dashkabot_web/index.html - Веб-интерфейс"
else
    echo "  ❌ dashkabot_web/index.html - ОТСУТСТВУЕТ"
    exit 1
fi

if [ -f "config/dashkabot_config.json" ]; then
    echo "  ✅ config/dashkabot_config.json - Конфигурация системы"
else
    echo "  ❌ config/dashkabot_config.json - ОТСУТСТВУЕТ"
    exit 1
fi

if [ -f "DashkaBotAndroid/app/build.gradle" ]; then
    echo "  ✅ DashkaBotAndroid/app/build.gradle - Android проект"
else
    echo "  ❌ DashkaBotAndroid/app/build.gradle - ОТСУТСТВУЕТ"
    exit 1
fi
# =================== ШАГ 3: УСТАНОВКА ЗАВИСИМОСТЕЙ ===================
show_progress 3 10 "📦 Установка зависимостей"

echo "🐍 Установка Python зависимостей..."
pip3 install aiohttp aiohttp-cors asyncio --quiet
check_status $? "Python зависимости установлены"

echo "🟢 Установка Node.js зависимостей..."
if [ ! -d "node_modules" ]; then
    npm install ws --silent
    check_status $? "Node.js зависимости установлены"
else
    echo "✅ Node.js зависимости уже установлены"
fi

# =================== ШАГ 4: СОЗДАНИЕ ЛОГОВ ===================
show_progress 4 10 "📝 Подготовка логирования"

mkdir -p logs run
touch logs/{ai_server,websocket_server,system}.log

echo "📝 Логи будут сохраняться в:"
echo "  • logs/ai_server.log - AI сервер"
echo "  • logs/websocket_server.log - WebSocket сервер"
echo "  • logs/system.log - Системные события"

# =================== ШАГ 5: ПРОВЕРКА ПОРТОВ ===================
show_progress 5 10 "🌐 Проверка доступности портов"

echo "🔍 Проверка портов:"

# Проверяем каждый порт
for port_info in "8080:AI Server" "8765:WebSocket Server" "8766:Stats Server" "8090:Web Interface"; do
    port=$(echo $port_info | cut -d: -f1)
    service=$(echo $port_info | cut -d: -f2)
    
    if lsof -i :$port &>/dev/null; then
        echo "  ⚠️  Порт $port занят ($service)"
        echo "     Освобождаем порт..."
        lsof -ti :$port | xargs kill -9 2>/dev/null
        sleep 1
    fi
    echo "  ✅ Порт $port свободен ($service)"
done
# =================== ШАГ 6: ЗАПУСК AI СЕРВЕРА ===================
show_progress 6 10 "🧠 Запуск AI сервера переводов"

echo "🧠 Запуск AI сервера на порту 8080..."
python3 ai_server.py > logs/ai_server.log 2>&1 &
AI_PID=$!

sleep 3

# Проверка запуска AI сервера
if kill -0 $AI_PID 2>/dev/null; then
    echo "✅ AI сервер запущен (PID: $AI_PID)"
    echo $AI_PID > run/ai_server.pid
else
    echo "❌ Ошибка запуска AI сервера"
    cat logs/ai_server.log
    exit 1
fi

# =================== ШАГ 7: ЗАПУСК WEBSOCKET СЕРВЕРА ===================
show_progress 7 10 "🌐 Запуск WebSocket сервера"

echo "🌐 Запуск WebSocket сервера на портах 8765/8766..."
node websocket_server.js > logs/websocket_server.log 2>&1 &
WS_PID=$!

sleep 3

# Проверка запуска WebSocket сервера
if kill -0 $WS_PID 2>/dev/null; then
    echo "✅ WebSocket сервер запущен (PID: $WS_PID)"
    echo $WS_PID > run/websocket_server.pid
else
    echo "❌ Ошибка запуска WebSocket сервера"
    cat logs/websocket_server.log
    exit 1
fi

# =================== ШАГ 8: ЗАПУСК ВЕБ-ИНТЕРФЕЙСА ===================
show_progress 8 10 "🌐 Запуск веб-интерфейса"

cd dashkabot_web
echo "🌐 Запуск веб-сервера на порту 8090..."
python3 -m http.server 8090 > ../logs/web_server.log 2>&1 &
WEB_PID=$!
cd ..

sleep 2

# Проверка веб-сервера
if kill -0 $WEB_PID 2>/dev/null; then
    echo "✅ Веб-сервер запущен (PID: $WEB_PID)"
    echo $WEB_PID > run/web_server.pid
else
    echo "❌ Ошибка запуска веб-сервера"
fi

# =================== ШАГ 9: ПРОВЕРКА ANDROID УСТРОЙСТВ ===================
show_progress 9 10 "📱 Проверка Android устройств"

echo "📱 Поиск Android устройств..."
adb start-server

# Получаем список устройств
devices=($(adb devices | tail -n +2 | grep -w "device" | cut -f1))
device_count=${#devices[@]}

echo "📊 Найдено Android устройств: $device_count"

if [ $device_count -gt 0 ]; then
    echo "📱 Подключенные устройства:"
    for i in "${!devices[@]}"; do
        device=${devices[$i]}
        model=$(adb -s $device shell getprop ro.product.model 2>/dev/null | tr -d '\r\n')
        role=$([ $i -eq 0 ] && echo "Steuerberater 🇩🇪" || echo "Пользователь 🇷🇺")
        echo "  📱 Устройство $((i+1)): $model ($device) → $role"
    done
else
    echo "⚠️  Android устройства не найдены"
    echo "💡 Система работает в режиме веб-интерфейса"
fi

# =================== ШАГ 10: ФИНАЛЬНАЯ ПРОВЕРКА И СТАТУС ===================
show_progress 10 10 "🎯 Финальная проверка системы"

# Проверяем все сервисы
echo "🔄 Проверка работоспособности сервисов..."

# AI Server
if curl -s http://localhost:8080/health > /dev/null; then
    AI_STATUS="✅ Работает"
else
    AI_STATUS="❌ Недоступен"
fi

# WebSocket Server
if curl -s http://localhost:8766/health > /dev/null; then
    WS_STATUS="✅ Работает"
else
    WS_STATUS="❌ Недоступен"
fi

# Web Interface
if curl -s http://localhost:8090 > /dev/null; then
    WEB_STATUS="✅ Работает"
else
    WEB_STATUS="❌ Недоступен"
fi

# Получаем IP адрес
LOCAL_IP=$(ifconfig | grep 'inet ' | grep -v 127.0.0.1 | head -1 | awk '{print $2}')

# Создаем файл статуса
cat > system_status.json << EOF
{
  "launch_time": "$(date -Iminutes)",
  "startup_duration": $(($(date +%s) - START_TIME)),
  "system_status": "active",
  "local_ip": "$LOCAL_IP",
  "services": {
    "ai_server": {
      "pid": $AI_PID,
      "port": 8080,
      "status": "$AI_STATUS",
      "url": "http://localhost:8080"
    },
    "websocket_server": {
      "pid": $WS_PID,
      "port": 8765,
      "stats_port": 8766,
      "status": "$WS_STATUS",
      "url": "ws://localhost:8765"
    },
    "web_interface": {
      "pid": $WEB_PID,
      "port": 8090,
      "status": "$WEB_STATUS",
      "url": "http://localhost:8090"
    }
  },
  "android_devices": {
    "count": $device_count,
    "devices": [$(printf '"%s",' "${devices[@]}" | sed 's/,$//')],
    "ready": $([ $device_count -gt 0 ] && echo "true" || echo "false")
  }
}
EOF

END_TIME=$(date +%s)
TOTAL_TIME=$((END_TIME - START_TIME))

echo ""
echo "🎯 ===== DASHKABOT СИСТЕМА ЗАПУЩЕНА ====="
echo "⏰ Время запуска: $TOTAL_TIME секунд"
echo "📍 IP адрес: $LOCAL_IP"
echo ""

echo "📊 СТАТУС СЕРВИСОВ:"
echo "🧠 AI Server (8080): $AI_STATUS"
echo "🌐 WebSocket (8765): $WS_STATUS"  
echo "📱 Web Interface (8090): $WEB_STATUS"
echo "📱 Android устройств: $device_count"
echo ""

echo "🔗 ДОСТУПНЫЕ ИНТЕРФЕЙСЫ:"
echo "• 🌐 Веб-интерфейс: http://$LOCAL_IP:8090"
echo "• 🔧 AI API: http://localhost:8080/health"
echo "• 📊 WebSocket Stats: http://localhost:8766/stats"
echo ""

echo "📱 ДЛЯ ANDROID УСТРОЙСТВ:"
echo "1. 🌐 Откройте браузер на телефоне"
echo "2. 📝 Введите: http://$LOCAL_IP:8090"
echo "3. 🎤 Выберите роль и начинайте говорить!"
echo ""

echo "📱 ДЛЯ PWA УСТАНОВКИ:"
echo "1. 🌐 Откройте http://$LOCAL_IP:8090 в браузере"
echo "2. ⋮ Меню → 'Добавить на главный экран'"
echo "3. 📱 DashkaBot установится как приложение"
echo ""

echo "🎯 ГОТОВЫЕ ФРАЗЫ ДЛЯ ТЕСТИРОВАНИЯ:"
echo "🇷🇺 Русский: 'Добрый день, мне нужна помощь с налогами'"
echo "🇩🇪 Немецкий: 'Guten Tag, wie kann ich Ihnen helfen?'"
echo ""

echo "🔧 УПРАВЛЕНИЕ СИСТЕМОЙ:"
echo "• 📊 Статус: cat system_status.json"
echo "• 📝 Логи: tail -f logs/*.log"
echo "• 🛑 Остановка: kill $AI_PID $WS_PID $WEB_PID"
echo "• 🔄 Перезапуск: ./$(basename $0)"
echo ""

# Создаем скрипт остановки
cat > stop_dashkabot.sh << 'EOF'
#!/bin/zsh
echo "🛑 Остановка DashkaBot системы..."

# Читаем PID файлы и останавливаем сервисы
for pid_file in run/*.pid; do
    if [ -f "$pid_file" ]; then
        pid=$(cat "$pid_file")
        service=$(basename "$pid_file" .pid)
        
        if kill -0 $pid 2>/dev/null; then
            echo "🛑 Остановка $service (PID: $pid)"
            kill $pid
            rm "$pid_file"
        fi
    fi
done

# Принудительная остановка по портам
for port in 8080 8765 8766 8090; do
    if lsof -ti :$port &>/dev/null; then
        echo "🔌 Освобождение порта $port"
        lsof -ti :$port | xargs kill -9 2>/dev/null
    fi
done

echo "✅ DashkaBot система остановлена"
EOF

chmod +x stop_dashkabot.sh

echo "🎉 ===== СИСТЕМА ГОТОВА К ИСПОЛЬЗОВАНИЮ ====="
echo ""
echo "🇩🇪↔️🇷🇺 ПОЕХАЛИ, СЕНЬОР! Можете общаться с Steuerberater!"
echo ""
echo "💡 Для остановки системы: ./stop_dashkabot.sh"

# Автоматическое открытие браузера (опционально)
if command -v open &> /dev/null; then
    echo "🌐 Открытие веб-интерфейса..."
    sleep 2
    open "http://localhost:8090"
fi

# Опционально: отправка на Android устройства
if [ $device_count -gt 0 ]; then
    echo ""
    echo "📱 Автоматическое открытие на Android устройствах..."
    for device in "${devices[@]}"; do
        adb -s $device shell am start -a android.intent.action.VIEW -d "http://$LOCAL_IP:8090" 2>/dev/null
    done
fi

echo ""
echo "📊 Система мониторинга запущена. Логи в реальном времени:"
echo "tail -f logs/system.log"