// DashkaBot Node.js Server with Environment Variables
require('dotenv').config();

const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY.includes('–≤–∞—à-–∫–ª—é—á')) {
    console.error('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
    console.error('üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á');
    process.exit(1);
}

console.log('‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:', process.env.OPENAI_API_KEY.substring(0, 8) + '...' + process.env.OPENAI_API_KEY.slice(-4));

const app = express();
const PORT = process.env.PORT || 8080;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('dashkabot_web'));

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞
let unifiedTranslationService, whisperService, textToSpeechService;

try {
    unifiedTranslationService = require('./unifiedTranslationService.js');
    console.log('‚úÖ Translation Service –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Translation Service:', error.message);
    process.exit(1);
}

try {
    whisperService = require('./whisperService.js');
    console.log('üé§ Whisper Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper Service:', error.message);
    whisperService = null;
}

try {
    textToSpeechService = require('./textToSpeechService.js');
    console.log('üîä Text-to-Speech Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TTS Service:', error.message);
    textToSpeechService = null;
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let stats = {
    totalRequests: 0,
    successfulTranslations: 0,
    errors: 0,
    startTime: new Date(),
    status: 'production'
};

// API Routes
app.get('/api/stats', (req, res) => {
    res.json({
        status: 'success',
        stats: {
            ...stats,
            uptime: Math.floor((Date.now() - stats.startTime.getTime()) / 1000)
        }
    });
});

app.get('/api/languages', (req, res) => {
    const languages = [
        { code: 'RU', name: '–†—É—Å—Å–∫–∏–π' },
        { code: 'EN', name: 'English' },
        { code: 'DE', name: 'Deutsch' },
        { code: 'ES', name: 'Espa√±ol' },
        { code: 'FR', name: 'Fran√ßais' },
        { code: 'IT', name: 'Italiano' },
        { code: 'PT', name: 'Portugu√™s' },
        { code: 'PL', name: 'Polski' },
        { code: 'CS', name: 'ƒåe≈°tina' }
    ];
    
    res.json({
        status: 'success',
        languages
    });
});

app.post('/api/translate', async (req, res) => {
    try {
        stats.totalRequests++;
        const { text, fromLang, toLang } = req.body;

        if (!text || !fromLang || !toLang) {
            stats.errors++;
            return res.status(400).json({
                status: 'error',
                message: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: text, fromLang, toLang'
            });
        }

        const result = await unifiedTranslationService.translateText(text, fromLang, toLang);
        stats.successfulTranslations++;

        res.json({
            status: 'success',
            translation: result
        });

    } catch (error) {
        stats.errors++;
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
        res.status(500).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞'
        });
    }
});

app.post('/api/voice-translate', async (req, res) => {
    try {
        if (!whisperService) {
            return res.status(503).json({
                status: 'error',
                message: 'Whisper Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            });
        }

        stats.totalRequests++;
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        res.json({
            status: 'success',
            message: 'Voice translation endpoint –≥–æ—Ç–æ–≤'
        });

    } catch (error) {
        stats.errors++;
        console.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
        res.status(500).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞'
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log('üöÄ DashkaBot AI Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
    console.log('üåê Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:' + PORT);
    console.log('ü§ñ API endpoint: http://localhost:' + PORT + '/api/');
    console.log('üìä –°—Ç–∞—Ç—É—Å: –†–µ–∞–ª—å–Ω—ã–µ OpenAI —Å–µ—Ä–≤–∏—Å—ã –∞–∫—Ç–∏–≤–Ω—ã');
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    process.exit(0);
});
