const express = require('express');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { UnifiedTranslationService } = require('./UnifiedTranslationService');

class DashkaBotNodeServer {
  constructor() {
    this.app = express();
    this.port = 8080;
    this.translationService = new UnifiedTranslationService();
    this.requestCount = 0;
    this.translationCache = new Map();
    
    this.setupMiddleware();
    this.setupRoutes();
    
    console.log('ü§ñ DashkaBot Node.js Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  setupMiddleware() {
    // CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    this.app.use(cors({
      origin: '*',
      methods: ['GET', 'POST', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization']
    }));

    // JSON –ø–∞—Ä—Å–µ—Ä
    this.app.use(express.json({ limit: '10mb' }));
    
    // Multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
    const upload = multer({
      dest: 'temp/',
      limits: { fileSize: 10 * 1024 * 1024 } // 10MB
    });
    
    this.upload = upload;
  }

  setupRoutes() {
    // Health check - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å DashkaBot
    this.app.get('/health', (req, res) => {
      res.json({
        status: 'healthy',
        service: 'DashkaBot AI Server (Node.js)',
        version: '3.0.0',
        mode: 'production',
        timestamp: new Date().toISOString(),
        requests_processed: this.requestCount,
        supported_languages: Object.keys(this.translationService.supportedLanguages).length
      });
    });

    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ - –æ—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è DashkaBot
    this.app.post('/translate', async (req, res) => {
      try {
        this.requestCount++;
        const startTime = Date.now();
        
        const { 
          text, 
          source_language = 'RU', 
          target_language = 'DE' 
        } = req.body;

        if (!text || text.trim() === '') {
          return res.status(400).json({
            error: '–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'
          });
        }

        console.log(`üì• –ó–∞–ø—Ä–æ—Å #${this.requestCount}: "${text}" (${source_language} ‚Üí ${target_language})`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cacheKey = `${text.trim()}_${source_language}_${target_language}`;
        if (this.translationCache.has(cacheKey)) {
          const cached = this.translationCache.get(cacheKey);
          console.log('üîÑ –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –∫—ç—à–∞');
          return res.json({
            ...cached,
            from_cache: true,
            processing_time_ms: Date.now() - startTime
          });
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ (DashkaBot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ru/de, –∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å RU/DE)
        const sourceCode = source_language.toUpperCase();
        const targetCode = target_language.toUpperCase();

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        const result = await this.translationService.translateText(
          text.trim(), 
          sourceCode, 
          targetCode
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å DashkaBot
        const response = {
          original_text: result.originalText,
          translated_text: result.translatedText,
          source_language: sourceCode.toLowerCase(),
          target_language: targetCode.toLowerCase(),
          confidence: result.confidence,
          timestamp: new Date().toISOString(),
          processing_time_ms: result.processingTime,
          mode: 'openai-gpt4o-mini',
          provider: result.provider,
          from_cache: false
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        this.translationCache.set(cacheKey, response);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if (this.translationCache.size > 1000) {
          const firstKey = this.translationCache.keys().next().value;
          this.translationCache.delete(firstKey);
        }

        console.log(`üì§ –ü–µ—Ä–µ–≤–æ–¥: "${result.translatedText}"`);
        res.json(response);

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
        res.status(500).json({
          error: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`,
          timestamp: new Date().toISOString()
        });
      }
    });

    // –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥
    this.app.post('/translate-voice', this.upload.single('audio'), async (req, res) => {
      try {
        if (!req.file) {
          return res.status(400).json({ error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }

        const { 
          source_language = 'RU', 
          target_language = 'DE' 
        } = req.body;

        console.log('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥:', { source_language, target_language });

        const result = await this.translationService.translateVoice(
          req.file.path,
          source_language.toUpperCase(),
          target_language.toUpperCase()
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        if (fs.existsSync(result.translatedAudio)) {
          res.json({
            original_text: result.originalText,
            translated_text: result.translatedText,
            audio_url: `/audio/${path.basename(result.translatedAudio)}`,
            processing_time_ms: result.processingTime,
            confidence: result.confidence
          });
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª');
        }

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(req.file.path);

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
        if (req.file) fs.unlinkSync(req.file.path);
        res.status(500).json({ error: error.message });
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    this.app.post('/detect-language', async (req, res) => {
      try {
        const { text } = req.body;
        
        if (!text) {
          return res.status(400).json({ error: '–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω' });
        }

        const result = await this.translationService.detectLanguage(text);
        res.json(result);

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞:', error);
        res.status(500).json({ error: error.message });
      }
    });

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
    this.app.get('/languages', (req, res) => {
      const languages = this.translationService.getSupportedLanguages();
      res.json({
        supported_languages: languages,
        count: languages.length,
        service: 'UnifiedTranslationService'
      });
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å DashkaBot
    this.app.get('/stats', (req, res) => {
      res.json({
        requests_processed: this.requestCount,
        cache_size: this.translationCache.size,
        supported_languages: Object.keys(this.translationService.supportedLanguages),
        mode: 'production',
        openai_configured: true,
        service_stats: this.translationService.getStats(),
        uptime: process.uptime(),
        memory_usage: process.memoryUsage()
      });
    });

    // –†–∞–∑–¥–∞—á–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
    this.app.use('/audio', express.static(path.join(__dirname, 'audio_output')));

    // –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
    this.app.get('/', (req, res) => {
      res.json({
        service: 'DashkaBot AI Server (Node.js)',
        version: '3.0.0',
        status: 'running',
        endpoints: [
          'GET /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
          'POST /translate - –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥',
          'POST /translate-voice - –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥',
          'POST /detect-language - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞',
          'GET /languages - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏',
          'GET /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
        ],
        languages: Object.keys(this.translationService.supportedLanguages).length
      });
    });
  }

  async start() {
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const dirs = ['temp', 'audio_output'];
      dirs.forEach(dir => {
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir, { recursive: true });
        }
      });

      this.server = this.app.listen(this.port, () => {
        console.log('üöÄ DashkaBot Node.js Server –∑–∞–ø—É—â–µ–Ω!');
        console.log(`üîó –î–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:${this.port}`);
        console.log('üìã Endpoints:');
        console.log(`   GET  http://localhost:${this.port}/health`);
        console.log(`   POST http://localhost:${this.port}/translate`);
        console.log(`   POST http://localhost:${this.port}/translate-voice`);
        console.log(`   GET  http://localhost:${this.port}/languages`);
        console.log(`   GET  http://localhost:${this.port}/stats`);
        console.log(`üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: ${Object.keys(this.translationService.supportedLanguages).join(', ')}`);
      });

      // Graceful shutdown
      process.on('SIGTERM', () => this.shutdown());
      process.on('SIGINT', () => this.shutdown());

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      process.exit(1);
    }
  }

  shutdown() {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    
    if (this.server) {
      this.server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        
        // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try {
          const tempFiles = fs.readdirSync('temp');
          tempFiles.forEach(file => {
            fs.unlinkSync(path.join('temp', file));
          });
        } catch (err) {
          console.log('–û—á–∏—Å—Ç–∫–∞ temp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', err.message);
        }
        
        process.exit(0);
      });
    } else {
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
  const server = new DashkaBotNodeServer();
  server.start();
}

module.exports = { DashkaBotNodeServer };